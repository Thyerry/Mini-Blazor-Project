@page "/enterprises"
@using MiniBlazorProject.Models;
@using MiniBlazorProject.Utils;
@using MiniBlazorProject.Contracts;

@inject HttpClient Http
@inject IEnterpriseService EnterpriseService
@inject ISegmentService SegmentService

<PageTitle>Enterprises</PageTitle>
<h1>Enterprises</h1>

<div>
    <a class="btn btn-success btn-sm py-1" href="view-enterprise">+ Add</a>
    <div class="py-1">
        Show:
        <select @onchange="PageSizeChange">
            @foreach (var item in Constants.PAGE_SIZES)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>
</div>

<input type="search" class="text-black" @oninput="OnChangeSearchBar" placeholder="Search Enterprise" />

@if (enterprises == null)
{
    @if (ErrorMessage != null)
    {
        <p>@ErrorMessage</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Site</th>
                <th>Segment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var enterprise in enterprises)
            {
                <tr>
                    <td>@enterprise.Name</td>
                    <td>@enterprise.Site</td>
                    <td>@GetSegmentName(enterprise.SegmentId)</td>
                    <td>
                        <a class="btn-outline-success" href="/view-enterprise/@enterprise.Id">
                            <span class="oi oi-eye" aria-hidden="true"></span>
                        </a>
                        <a class="btn-outline-danger" @onclick="() => DeleteEnterprise(enterprise.Id)">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </a>
                        <a class="btn-outline-primary" href="view-enterprise/@enterprise.Id">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th>Name</th>
                <th>Site</th>
                <th>Segment</th>
                <th>Actions</th>
            </tr>
        </tfoot>
    </table>
}

<PageControl currentPage="@currentPage"
             pageSize="@pageSize"
             totalPages="@totalPages"
             ChangePage="ChangePage" />

@code {
    private List<Enterprise> enterprises = new List<Enterprise>();
    private List<Segment> segments = new();
    private int pageSize = Constants.DEFAULT_PAGE_SIZE;
    private int currentPage = Constants.DEFAULT_PAGE;
    private int totalPages = 1;
    private int totalEnterprises = 1;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await UpdatePageValues();
        await Render();
    }

    protected async Task DeleteEnterprise(string enterpriseId)
    {
        await EnterpriseService.DeleteEnterprise(enterpriseId);
        enterprises = enterprises.Where(et => et.Id != enterpriseId).ToList();
    }

    protected async Task OnChangeSearchBar(ChangeEventArgs ev)
    {
        var searchText = ev.Value.ToString();
        if (string.IsNullOrEmpty(searchText))
            await Render();
        else
        {
            enterprises = await EnterpriseService.QueryEnterprises(searchText, pageSize, currentPage);
            totalEnterprises = enterprises.Count;
            await UpdatePageValues();
        }
    }

    protected string GetSegmentName(string segmentId)
    {
        var result = segments.FirstOrDefault(s => s.Id == segmentId);
        return result != null ? result.Name : "";
    }
    protected async Task Render()
    {
        try
        {
            enterprises = await EnterpriseService.GetEnterprises(pageSize, currentPage);
            if (!segments.Any())
                segments = await SegmentService.GetAllSegments(Constants.PAGE_SIZES.Max(), 1);
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            throw;
        }
    }

    protected async Task PageSizeChange(ChangeEventArgs args)
    {
        pageSize = int.Parse(args.Value.ToString());
        await UpdatePageValues();
        await Render();
    }

    protected async Task ChangePage(int newPage)
    {
        currentPage = newPage;
        await Render();
    }

    protected async Task UpdatePageValues()
    {
        totalEnterprises = await EnterpriseService.GetEnterprisesCount();
        totalPages = (int)Math.Ceiling((double)totalEnterprises / pageSize);
    }

    protected void LogPageInfo()
    {
        Console.WriteLine(pageSize);
        Console.WriteLine(currentPage);
    }
}
