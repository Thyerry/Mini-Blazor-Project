@page "/segments"
@using MiniBlazorProject.Contracts;
@using MiniBlazorProject.Models;
@using MiniBlazorProject.Utils;

@inject ISegmentService SegmentService;

<PageTitle>Segments</PageTitle>
<div>
    <a class="btn btn-success btn-sm py-1" href="view-segment">+ Add</a>
    <div class="py-1">
        Show:
        <select @onchange="PageSizeChange">
            @foreach (var item in Constants.PAGE_SIZES)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>
</div>

<input type="search" class="text-black" @oninput="OnChangeSearchBar" placeholder="Search Enterprise" />

@if (segments == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <span class="alert-danger">@errorMessage</span>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var segment in segments)
            {
                <tr>
                    <td>@segment.Name</td>
                    <td>@segment.Description</td>
                    <td>
                        <a class="btn-outline-success" href="view-segment/@segment.Id">
                            <span class="oi oi-eye" aria-hidden="true"></span>
                        </a>
                        <a class="btn-outline-danger" @onclick="() => DeleteSegment(segment.Id)">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </a>
                        <a class="btn-outline-primary" href="view-segment/@segment.Id">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Action</th>
            </tr>
        </tfoot>
    </table>
}

<PageControl currentPage="@currentPage"
             pageSize="@pageSize"
             totalPages="@totalPages"
             ChangePage="ChangePage" />
@code {
    private List<Segment> segments;
    private int pageSize = Constants.DEFAULT_PAGE_SIZE;
    private int currentPage = Constants.DEFAULT_PAGE;
    private int totalPages = 1;
    private int totalSegments = 1;
    private string errorMessage = "";
    protected override async Task OnInitializedAsync()
    {
        await UpdatePageValues();
        await Render();
    }

    protected async Task Render()
    {
        segments = await SegmentService.GetAllSegments(pageSize, currentPage);
    }

    protected async Task UpdatePageValues()
    {
        totalSegments = await SegmentService.GetSegmentCount();
        totalPages = (int)Math.Ceiling((double)totalSegments / pageSize);
    }

    protected async Task PageSizeChange(ChangeEventArgs args)
    {
        pageSize = int.Parse(args.Value.ToString());
        await UpdatePageValues();
        await Render();
    }

    protected async Task OnChangeSearchBar(ChangeEventArgs ev)
    {
        var searchText = ev.Value.ToString();
        if (string.IsNullOrEmpty(searchText))
            await Render();
        else
        {
            segments = await SegmentService.QuerySegments(searchText, pageSize, currentPage);
        }
    }
    protected async Task DeleteSegment(string segmentId)
    {
        try
        {
            errorMessage = string.Empty;
            await SegmentService.DeleteSegment(segmentId);
            segments = segments.Where(et => et.Id != segmentId).ToList();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = ex.Message;
        }
    }

    protected async Task ChangePage(int newPage)
    {
        currentPage = newPage;
        await Render();
    }
}
